---
alwaysApply: true
---

# Omechu-web 폴더 구조 가이드

이 문서는 Omechu-web 프로젝트의 일관된 코드베이스 유지를 위한 폴더 구조 규칙을 정의합니다. 모든 팀원은 이 규칙을 준수하여 작업해 주시기 바랍니다.

## 1. 경로 별칭 (Path Alias)

- `@` 경로 별칭은 `omechu-app/src/app` 디렉토리를 가리킵니다.
- `tsconfig.json`의 `"paths": { "@/*": ["./*"] }` 설정을 기반으로 합니다.
- 따라서 `@/components/button/BottomButton` 은 `omechu-app/src/app/components/button/BottomButton` 을 의미합니다.

## 2. 기본 구조: Feature-based

프로젝트는 **기능(Feature) 기반**으로 구조화됩니다. 모든 소스 코드는 `omechu-app/src/app` 디렉토리 내에 각 기능의 이름을 딴 폴더 안에 위치해야 합니다.

```
omechu-app/
└── src/
    ├── app/
    │   ├── (auth)/         # 인증 기능
    │   ├── restaurant/   # 음식점 기능
    │   ├── mypage/       # 마이페이지 기능
    │   └── shared/       # 여러 기능에서 공통으로 사용하는 모듈
```

## 3. 기능 폴더(Feature Folder) 내부 구조

각 기능 폴더는 다음과 같은 하위 폴더를 가질 수 있습니다. 필요한 경우에만 생성합니다.

- `api/`: API 요청 함수 및 관련 타입 정의
- `components/`: 해당 기능에서만 사용하는 React 컴포넌트
- `hooks/`: 해당 기능에서만 사용하는 커스텀 훅
- `store/`: 해당 기능과 관련된 전역 상태 (Zustand, Recoil 등)
- `schemas/`: Zod 등을 이용한 유효성 검사 스키마
- `types/`: 해당 기능에서만 사용하는 타입 정의
- `utils/`: 해당 기능에서만 사용하는 유틸리티 함수

**예시: `auth` 기능 폴더**

```
auth/
├── api/
│   └── auth.ts
├── components/
│   └── LoginForm.tsx
├── hooks/
│   └── useAuth.ts
├── schemas/
│   └── auth.schema.ts
└── store.ts
```

## 4. 공통 모듈

- 두 개 이상의 기능에서 공통으로 사용되는 코드는 `lib/` 폴더에 위치시킵니다. `lib/api`, `lib/hooks`, `lib/providers`, `lib/schemas`, `lib/stores`
- **예시**: `axios` 인스턴스를 관리하는 `apiClient`는 `lib/api/client.ts` 에 위치합니다.
- **예시**: 여러 페이지에서 공통으로 사용되는 `Button`, `Input` 등의 UI 컴포넌트는 `@/components/common/` 에 위치시킬 수 있습니다.

이 규칙을 통해 코드의 응집도를 높이고, 팀원들이 파일을 쉽게 찾고 이해할 수 있도록 합니다.
